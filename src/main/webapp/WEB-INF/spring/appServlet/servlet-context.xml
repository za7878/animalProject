<?xml version="1.0" encoding="UTF-8"?>

<beans:beans
	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
	https://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/beans 
	https://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	https://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
	http://www.springframework.org/schema/mvc:mapping
	http://www.springframework.org/schema/mvc:exclude
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd"	
	xmlns:exclude="http://www.springframework.org/schema/exclude"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop">

<!-- <tx:annotation-driven />를 사용하기 전  tx, p접두사를 사용하기 위해 schema 추가.-->


	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- Enables the Spring MVC @Controller programming model -->


	<!-- <annotation-driven> Anntation 활성화. 스프링 MVC 컴포넌트들을 그것의 디폴트 설정을 가지고 활성화하기 
		위해 사용된다. 이 태그는 Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 
		bean으로 등록한다. -->
	<annotation-driven />
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources location="/resources/" mapping="/resources/**" />
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="1">
		<beans:property value="/WEB-INF/views/" name="prefix" />
		<beans:property value=".jsp" name="suffix" />
	</beans:bean>
	
	<!-- <beans:bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver" p:order="0">
	</beans:bean>
	
	일반 bean
	<beans:bean id="jsonView"
		class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
	</beans:bean> -->

	<!-- <context:component-scan> 특정 패키지 안의 클래스들을 스캔하고, Annotation을 확인 후 bean 
		인스턴스를 생성한다. @Component @Controller @Service @Repository 등의 Annotation이 존재해야 
		bean을 생성할 수 있다. -->
	<context:component-scan
		base-package="com.human.app" />
		<!-- DB -->
    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.SimpleDriverDataSource" name="dataSource">
        <beans:property name="driverClass" value="org.mariadb.jdbc.Driver"></beans:property>
        <beans:property name="url" value="jdbc:mariadb://localhost:3306/"></beans:property>
        <beans:property name="username" value="root"></beans:property>
        <beans:property name="password" value="191214"></beans:property>
    </beans:bean>
		
	<!-- <beans:bean
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		name="dataSource">
		<beans:property value="oracle.jdbc.driver.OracleDriver"
			name="driverClassName" />
		<beans:property
			value="jdbc:oracle:thin:@localhost:1521:xe" name="url" />
		<beans:property value="ora_user" name="username" />
		<beans:property value="human123" name="password" />
	</beans:bean> -->

	<!-- <DataSource> 커넥션 풀의 Connection을 관리하기 위한 객체이다. JNDI Server를 통해서 이용된다. 
		DataSource 객체를 통해서 필요한 Connection을 획득, 반납 등의 작업을 한다. -->

	<!-- DataSource는 서버에서 관리하는 리소스인 커넥션 풀을 사용할 수 있게 하는 객체로서, 서버가 시작할 때 커넥션 풀이 
		서버에 준비되어 있어야 합니다. 그래야 DB 프로그래밍을 할 때 커넥션 풀에서 Connection 객체를 얻어낼 수 있습니다. -->

	<!-- JNDI란? JNDI(Java Naming and Directory Interface)는 디렉터리 서비스에서 제공하는 데이터 
		및 객체를 발견하고 참고하기 위한 자바 API다. -->

	<!-- JDBC(Java Database Connectivity)는 자바에서 데이터베이스에 접속할 수 있도록 하는 자바 API이다. 
		JDBC는 데이터베이스에서 자료를 쿼리하거나 업데이트하는 방법을 제공한다. -->


	<!-- 실질적으로 Mysql 서버와 MyBatis를 연결해주는건 SqlSessionFactory라는 객체. 이 객체가 DataSource를 
		참조하여 MyBatis와 Mysql 서버를 연동 시켜 준다. -->
	<beans:bean class="org.mybatis.spring.SqlSessionFactoryBean"
		id="sqlSessionFactory">
		<beans:property name="dataSource" ref="dataSource" /> <!-- sqlSessionFactory가, dataSource 를 참조한다. -->
		<beans:property
			value="classpath:com/human/app/*/mappers/*.xml" name="mapperLocations" />
	</beans:bean> <!-- 마이바티스에서는 SqlSession를 생성하기 위해 SqlSessionFactory를 사용 -->


	<!-- SqlSessionTemplate은 SqlSession을 구현하고 코드에서 SqlSession를 대체하는 역할을 한다. 
		SqlSessionTemplate 은 쓰레드에 안전하고 여러개의 DAO나 매퍼에서 공유할수 있다. -->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession">
		<beans:constructor-arg ref="sqlSessionFactory"
			index="0" /> <!-- SqlSessionTemplate은 생성자 인자로 SqlSessionFactory를 사용하여 생성된다. -->
	</beans:bean>

	<beans:bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />

	<beans:bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />
	<tx:annotation-driven
		transaction-manager="txManager" />

	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<exclude-mapping path="/" />
			<exclude-mapping path="/signin" />
			<exclude-mapping path="/checkUser" />
			<exclude-mapping path="/newbie" />
			<exclude-mapping path="/login" />
			<exclude-mapping path="/pet" />
			<exclude-mapping path="/movie" />
			<exclude-mapping path="/movie/*" />
			<exclude-mapping path="/nealo" />
			<exclude-mapping path="/loginPostNaver" />
			<exclude-mapping path="/callBack" />
			<!-- <exclude-mapping path="/viewinfo" />  -->
			<beans:bean class="com.human.app.controller.interceptor.MyInterceptor" />
		</interceptor>
	</interceptors>
<!-- mapping 엘리먼트는 bean 엘리먼트가 지정하는 핸들러 인터셉터를 적용할 URI패턴을 지정 -->

<!-- @AspectJ를 사용하기 위해서 XML설정 파일에 <aop:aspectj-autoproxy/> 태그를 설정에 추가해야한다.
 자바설정을 이용하여 사용하는 경우에는 @EnableAspectJAutoProxy를 추가해야 한다. -->
<aop:aspectj-autoproxy />
<!-- <beans:bean id="Aop" class="com.human.app.controller.Aop" /> -->

<!-- aop:aspectj-autoproxy 를 설정하면,
스프링 컨테이너는 AOP 관련 어노테이션들을 자동으로 인식하고 용도에 맞게 처리해준다. -->

</beans:beans>